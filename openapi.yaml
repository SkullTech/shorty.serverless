openapi: 3.0.1
info:
  title: Shorty
  description: >-
    Serverless URL shortener hosted using AWS API Gateway, Lambda and S3. Find a
    frontend for this API @
    [https://shorty.skghosh.me](https://shorty.skghosh.me). Find the source code
    @ [Github](https://github.com/SkullTech/shorty.serverless).
  contact:
    email: sumit@sumit-ghosh.com
  license:
    name: The MIT License
    url: 'https://opensource.org/licenses/MIT'
  version: 1.0.0
externalDocs:
  description: Find out more about Shorty
  url: 'https://github.com/SkullTech/shorty.serverless'
servers:
  - url: 'https://shorty.skghosh.me/api'
  - url: 'http://shorty.skghosh.me/api'
tags:
  - name: urls
    description: Everything about your URLs
paths:
  /urls:
    post:
      tags:
        - urls
      summary: Shorten an URL
      description: >-
        Shorten an URL, either using your own custom slug or a randomly
        generated one.
      requestBody:
        description: >-
          The URL object containing the long URL which is to be shortened, and
          optionally containing the slug you'd like to use. If you do not
          provide a slug, _Shorty_ will automatically generate a random one for
          you.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/url'
            examples:
              custom:
                summary: Choosing your own custom slug
                value:
                  slug: sghosh
                  longUrl: 'https://sumit-ghosh.com'
              random:
                summary: Letting shorty generate a random slug for you
                value:
                  longUrl: 'https://github.com'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/url'
              example:
                slug: sghosh
                longUrl: 'https://sumit-ghosh.com'
                visits: 0
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: slug already exists
  '/urls/{slug}':
    get:
      tags:
        - urls
      summary: Get a URL by slug.
      description: >
        Fetch details about an already shortened URL, including the number of
        visits it has received.
      parameters:
        - name: slug
          in: path
          description: URL slug of the short link
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/url'
              example:
                slug: sghosh
                longUrl: 'https://sumit-ghosh.com'
                visits: 420
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: URL does not exist
components:
  schemas:
    url:
      type: object
      properties:
        slug:
          type: string
        longUrl:
          type: string
        visits:
          type: integer
      required:
        - longUrl
    error:
      type: object
      properties:
        error:
          type: string
